// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef RECAPTCHAENTERPRISE_SWIFT_H
#define RECAPTCHAENTERPRISE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if 1  /* #if __has_feature(objc_modules) */
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
// Rewritten: @import Foundation;
// From module Foundation
#import <Foundation/Foundation.h>
// Rewritten: @import ObjectiveC;
// From module ObjectiveC
// From module ObjectiveC.NSObject
#import <objc/NSObject.h>
// From module ObjectiveC.message
#import <objc/message.h>
// From module ObjectiveC.NSObjCRuntime
#import <objc/NSObjCRuntime.h>
// From module ObjectiveC.objc_api
#import <objc/objc-api.h>
// From module ObjectiveC.objc_auto
#import <objc/objc-auto.h>
// From module ObjectiveC.objc_exception
#import <objc/objc-exception.h>
// From module ObjectiveC.objc_sync
#import <objc/objc-sync.h>
// From module ObjectiveC.objc
#import <objc/objc.h>
// From module ObjectiveC.runtime
#import <objc/runtime.h>
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RecaptchaEnterprise",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


@class NSString;
@class RecaptchaClient;
@class NSError;

/// Interface to interact with reCAPTCHA.
SWIFT_CLASS("_TtC19RecaptchaEnterprise9Recaptcha")
@interface Recaptcha : NSObject
/// Builds a new reCAPTCHA Client for the given Site Key.
/// The SDK accepts one Site Key. Passing a different Site Key will throw an exception.
/// \param siteKey reCAPTCHA Site Key for the app.
///
/// \param completion Callback function to return the RecaptchaClient or an error.
///
+ (void)fetchClientWithSiteKey:(NSString * _Nonnull)siteKey completion:(void (^ _Nonnull)(RecaptchaClient * _Nullable, NSError * _Nullable))completion;
/// Builds a new reCAPTCHA Client for the given Site Key and timeout.
/// The SDK accepts one Site Key. Passing a different Site Key will
/// throw an exception.
/// At least a 10000 milliseconds timeout is suggested to allow for slow
/// networking, though in some cases longer timeouts may be necessary. The
/// minimum allowable value is 5000 milliseconds.
/// \param siteKey reCAPTCHA Site Key for the app.
///
/// \param timeout Timeout for getClient in milliseconds.
///
/// \param completion Callback function to return the RecaptchaClient or an error.
///
+ (void)getClientWithSiteKey:(NSString * _Nonnull)siteKey withTimeout:(double)timeout completion:(void (^ _Nonnull)(RecaptchaClient * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use the new api `fetchClient(withSiteKey:completion:)` instead.");
/// Builds a new reCAPTCHA Client for the given Site Key and timeout.
/// The SDK accepts one Site Key. Passing a different Site Key will
/// throw an exception.
/// This function will timeout after 10 seconds.
/// \param siteKey reCAPTCHA Site Key for the app.
///
/// \param completion Callback function to return the RecaptchaClient or an error.
///
+ (void)getClientWithSiteKey:(NSString * _Nonnull)siteKey completion:(void (^ _Nonnull)(RecaptchaClient * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use the new api `fetchClient(withSiteKey:completion:)` instead.");
/// Builds a new reCAPTCHA Client for the given SiteKey.
/// This function will timeout after 10 seconds.
/// \param siteKey reCAPTCHA Site Key for the app.
///
/// \param completionHandler Callback function to return the RecaptchaClient or an error.
///
+ (void)getClientWithSiteKey:(NSString * _Nonnull)siteKey completionHandler:(void (^ _Nonnull)(RecaptchaClient * _Nullable, NSError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use the new api `fetchClient(withSiteKey:completion:)` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum RecaptchaActionType : NSInteger;

/// Action intended to be protected by reCAPTCHA. This object should be passed
/// to RecaptchaClient.execute.
SWIFT_CLASS("_TtC19RecaptchaEnterprise15RecaptchaAction")
@interface RecaptchaAction : NSObject
/// Creates an object with a predefined reCAPTCHA action.
/// \param action The type of the action.
///
///
/// returns:
/// A RecaptchaAction object with the given action type.
- (nonnull instancetype)initWithAction:(enum RecaptchaActionType)action OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Please use customAction with the regular RecaptchaAction.custom() function");
/// Indicates that the protected action is a Login workflow.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RecaptchaAction * _Nonnull login;)
+ (RecaptchaAction * _Nonnull)login SWIFT_WARN_UNUSED_RESULT;
/// Indicates that the protected action is a Signup workflow.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RecaptchaAction * _Nonnull signup;)
+ (RecaptchaAction * _Nonnull)signup SWIFT_WARN_UNUSED_RESULT;
/// Creates a custom action from a String.
+ (RecaptchaAction * _Nonnull)custom:(NSString * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Action type intended to be protected by reCAPTCHA.
typedef SWIFT_ENUM(NSInteger, RecaptchaActionType, open) {
/// Indicates that the protected action is a Login workflow.
  RecaptchaActionTypeLogin = 0,
/// Indicates that the protected action is a Signup workflow.
  RecaptchaActionTypeSignup = 1,
/// When a custom action is specified, reCAPTCHA uses this value automatically.
  RecaptchaActionTypeOther = 2,
};

@class RecaptchaToken;
@class RecaptchaError;

/// Interface to interact with reCAPTCHA.
SWIFT_CLASS("_TtC19RecaptchaEnterprise15RecaptchaClient")
@interface RecaptchaClient : NSObject
/// Executes reCAPTCHA on a user action.
/// It is suggested the usage of 10 seconds for the timeout. The minimum value
/// 5 seconds.
/// \param action The user action to protect.
///
/// \param timeout Timeout for execute in milliseconds.
///
/// \param completion Callback function to return the execute response.
///
- (void)executeWithAction:(RecaptchaAction * _Nonnull)action withTimeout:(double)timeout completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Executes reCAPTCHA on a user action.
/// This function throws a timeout exception after 10 seconds.
/// \param action The user action to protect.
///
/// \param completion Callback function to return the execute response.
///
- (void)executeWithAction:(RecaptchaAction * _Nonnull)action completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Executes reCAPTCHA on a user action.
/// This function throws a timeout exception after 10 seconds.
/// \param action The user action to protect.
///
/// \param completion Callback function to return the execute response.
///
- (void)execute:(RecaptchaAction * _Nonnull)action completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Executes reCAPTCHA on a user action.
/// This function throws a timeout exception after 10 seconds.
/// \param action The user action to protect.
///
/// \param completionHandler Callback function to return the execute response.
///
- (void)execute:(RecaptchaAction * _Nonnull)action completionHandler:(void (^ _Nonnull)(RecaptchaToken * _Nullable, RecaptchaError * _Nullable))completionHandler SWIFT_DEPRECATED_MSG("Use `execute(withAction:completion:)` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19RecaptchaEnterprise17RecaptchaConstant")
@interface RecaptchaConstant : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientVersion;)
+ (NSString * _Nonnull)clientVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultTimeoutExecute;)
+ (double)defaultTimeoutExecute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultTimeoutInit;)
+ (double)defaultTimeoutInit SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RecaptchaErrorCode : NSInteger;
@class NSCoder;

/// Error class for reCAPTCHA Events.
SWIFT_CLASS("_TtC19RecaptchaEnterprise14RecaptchaError")
@interface RecaptchaError : NSError
/// Code relative to the error that was thrown. It maps to <code>RecaptchaErrorCode</code>.
@property (nonatomic, readonly) enum RecaptchaErrorCode errorCode;
/// Human readable error message.
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
/// Required by <code>NSError</code> but should not be used.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/// List of errors that can be returned from the SDK.
/// IMPORTANT: This list is add-only. Never change any existing value, since this class is
/// publicly visible and customers rely on these values to do error checking.
typedef SWIFT_ENUM(NSInteger, RecaptchaErrorCode, open) {
/// Unknown error occurred during the workflow.
  RecaptchaErrorCodeErrorCodeUnknown = 0,
/// reCAPTCHA cannot connect to Google servers, please make sure the app has network access.
  RecaptchaErrorCodeErrorNetworkError = 1,
/// The site key used to call reCAPTCHA is invalid.
  RecaptchaErrorCodeErrorInvalidSiteKey = 2,
/// Cannot create a reCAPTCHA interface because the key used cannot be used on iOS.
/// Please register new site key with the key type set to “iOS App” via
/// <a href="https://cloud.google.com/recaptcha/docs/create-key">Create Key</a>.
  RecaptchaErrorCodeErroInvalidKeyType = 3,
/// Cannot create a reCAPTCHA interface because the site key used doesn’t support the calling
/// package.
  RecaptchaErrorCodeErrorInvalidPackageName = 4,
/// reCAPTCHA cannot accept the action used, see custom
/// <a href="https://cloud.google.com/recaptcha/docs/actions-mobile">action guidelines</a>.
  RecaptchaErrorCodeErrorInvalidAction = 5,
/// reCAPTCHA cannot accept timeout provided, see
/// <a href="https://cloud.google.com/recaptcha/docs/instrument-ios-apps#timeout">timeout guidelines</a>.
  RecaptchaErrorCodeErrorInvalidTimeout = 6,
/// No network was found in the device.
  RecaptchaErrorCodeErrorNoNetwork = 7,
/// reCAPTCHA has faced an internal error, please try again in a bit.
  RecaptchaErrorCodeErrorCodeInternalError = 100,
};


/// Swift implementation for RecaptchaTokenSwift that holds the response of a successful
/// execute call.
SWIFT_CLASS("_TtC19RecaptchaEnterprise14RecaptchaToken") SWIFT_DEPRECATED_MSG("Newer implementations return the Token as a string.")
@interface RecaptchaToken : NSObject
/// The Token to be used for verification.
@property (nonatomic, readonly, copy) NSString * _Nonnull recaptchaToken;
- (nonnull instancetype)init:(NSString * _Nonnull)mobilemivdvtyi OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Newer implementations return the Token as a string.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
